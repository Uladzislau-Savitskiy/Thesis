1. Создается папка CORE - ядро нашего проекта, все что надо будет для проекта
    1.1 Файл SETTINGS натсройки пайдентика. В файле будет чтение переменных окружений, Будет читать файл .env, Будет валидация ссылко.
        1.1.1 - (BASE_DIR = Path(__file__).parent.parent.parent, DB_PATH = BASE_DIR / "db.sqlite3") - путь до файла, где будет создаваться и название файла БД
    1.2 Пакет MODELS здесь можно будет описать основу базу, того над чем мы будем работать, а также будет содержать модели БД
        1.2.1 Файл BASE базовый класс для моделей.
            1.2.1.1 __abstract__ - метод для того чтобы в БД не создавалась модель Base
            1.2.1.2. def __tablename__(cls) -> str - метод который будет создавть имя таблицы по нозванию модели
            1.2.1.3 - id, для моделей который наследуются от Base, чтобы был id(тоесть для всех моделей)
        1.2.2 - в файле __INIT__ сделаны импорты для Base, db_helper и Bot, чтобы использывать в других файлах
        1.2.3 - создан файл DB_HELPER - движок для БД
            1.2.3.1 - параметр echo в DataBase нужен чтобы видеть какие запросы выполняются (режим отладки), при разработке True, при релизе False
        1.2.4 - файл MAIN создана функция lifespan, запустить создание новой БД, до yield настройка приложения, после yield удаляем(делаем чистку не нужного)
    1.3 в папке SRC создана папка бот и в ней файлы crud("create, read, updata, delete"), schemas(сериализатор), views
        1.3.1 в файле SCHEMA созадана базовая схема для бота, схема для создания бота и схема для получение через get. В create не должно быть id!!!
!                   !!! Добавить валидацию на ссылку бота
                    model_config - чтобы возвращался не резульатат с БД, а json
!       1.3.2 в файле CRUD создаются методы для получения списка всех ботов, получения бота по id и созданию записи бота. !!! В дальнейшем будет удаление, обновление
                1.3.2.1 "get_bots": order_by - сортировать по чему-то. select - "вытащить" из БД
                                    scalars().all() - как я понял первый надо, чтобы то что вытаскивает селект было не в 10 tuple, а в одном(если мы достаем из БД 10 ботов)
                                    execute - выполнить выражение
                1.3.2.2 "create_bot" принимает на вход параметры из схемы BotCreate,
                                     session.add(bot) - открытие сессии для записи в БД,
                                     await session.commit() - закрывает сессию
                                     await session.refresh(bot) - обновляет, данные, мало ли кто то другой перезаписал
                1.3.2.3 "delete_bot" удаление, на вход передается бот, в views для ботов указано, что передается id бота
        1.3.3 в файле VIEWS созданы роутары для получения бота по id, списка ботов и создания
                response_model - что должно возвращать. В этом варианте список ботов
        1.3.4 в __INIT_ для ботов добавлен роутер для импортирования
        1.3.5 создан DEPENDENCIES для ботов, чтобы при получении через get одного бота, выводилось сообщение, что бот не найден(если по id)